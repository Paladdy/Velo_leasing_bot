# GitLab CI/CD –¥–ª—è Velo Leasing Bot

stages:
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
test:
  stage: test
  image: python:3.11-slim
  before_script:
    - pip install -r requirements.txt
  script:
    - echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    - python -m py_compile main.py
    - python -m py_compile bot/**/*.py
    - python -m py_compile database/**/*.py
    - echo "‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å Python –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
  only:
    - main
    - merge_requests

# –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main

# –î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫)
deploy_production:
  stage: deploy
  image: docker:latest
  script:
    - echo "üöÄ –î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω..."
    - echo "–ó–¥–µ—Å—å –±—É–¥—É—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä"
    # –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥:
    # - ssh $DEPLOY_USER@$DEPLOY_HOST "docker pull $CI_REGISTRY_IMAGE:latest"
    # - ssh $DEPLOY_USER@$DEPLOY_HOST "docker-compose -f /path/to/docker-compose.yml up -d"
  environment:
    name: production
    url: https://your-bot-domain.com
  when: manual
  only:
    - main

# –î–µ–ø–ª–æ–π –Ω–∞ staging (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π)
deploy_staging:
  stage: deploy
  image: docker:latest
  script:
    - echo "üîÑ –î–µ–ø–ª–æ–π –Ω–∞ staging..."
    - echo "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏"
  environment:
    name: staging
    url: https://staging.your-bot-domain.com
  only:
    - main

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
security_scan:
  stage: test
  image: python:3.11-slim
  before_script:
    - pip install safety bandit
  script:
    - echo "üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
    - safety check -r requirements.txt
    - bandit -r . -f json -o bandit-report.json || true
  artifacts:
    reports:
      security:
        - bandit-report.json
  allow_failure: true
  only:
    - main
    - merge_requests

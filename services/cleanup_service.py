"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ orphaned —Ñ–∞–π–ª–æ–≤ (—Ñ–∞–π–ª—ã –±–µ–∑ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î).
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∫–∞–∫ background –∑–∞–¥–∞—á–∞.
"""
import os
import asyncio
from pathlib import Path
from datetime import datetime, timedelta
from typing import Set

from sqlalchemy import select
from database.base import async_session_factory
from database.models.document import Document
from config.settings import settings


class CleanupService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ orphaned —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        self.upload_dir = self._get_upload_dir()
    
    def _get_upload_dir(self) -> Path:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫"""
        if os.path.isabs(settings.upload_path):
            return Path(settings.upload_path)
        else:
            # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
            project_root = Path(__file__).parent.parent
            return project_root / settings.upload_path
    
    async def cleanup_orphaned_files(self, max_age_hours: int = 48) -> dict:
        """
        –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ:
        1. –ù–µ –∏–º–µ—é—Ç –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        2. –°—Ç–∞—Ä—à–µ max_age_hours —á–∞—Å–æ–≤
        
        Args:
            max_age_hours: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–∞ –≤ —á–∞—Å–∞—Ö
            
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {deleted: int, errors: int, kept: int}
        """
        print(f"\n{'='*60}")
        print(f"üßπ Starting cleanup of orphaned files (age > {max_age_hours}h)")
        print(f"{'='*60}")
        
        if not self.upload_dir.exists():
            print(f"‚ö†Ô∏è  Upload directory does not exist: {self.upload_dir}")
            return {"deleted": 0, "errors": 0, "kept": 0}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ë–î
        async with async_session_factory() as session:
            result = await session.execute(select(Document.file_path))
            db_files = {Path(row[0]) for row in result.all()}
        
        print(f"üìä Files in database: {len(db_files)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ uploads
        deleted = 0
        errors = 0
        kept = 0
        cutoff_time = datetime.now() - timedelta(hours=max_age_hours)
        
        for file_path in self.upload_dir.glob("*"):
            if not file_path.is_file():
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º .gitkeep –∏ –¥—Ä—É–≥–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
            if file_path.name.startswith("."):
                continue
            
            file_absolute = file_path.absolute()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ –ë–î
            if file_absolute in db_files or str(file_absolute) in {str(f) for f in db_files}:
                kept += 1
                continue
            
            # –§–∞–π–ª –Ω–µ –≤ –ë–î - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
            try:
                file_mtime = datetime.fromtimestamp(file_path.stat().st_mtime)
                
                if file_mtime < cutoff_time:
                    # –§–∞–π–ª —Å—Ç–∞—Ä—à–µ cutoff_time - —É–¥–∞–ª—è–µ–º
                    file_path.unlink()
                    print(f"üóëÔ∏è  Deleted orphaned file: {file_path.name} (age: {datetime.now() - file_mtime})")
                    deleted += 1
                else:
                    # –§–∞–π–ª –Ω–æ–≤—ã–π - –æ—Å—Ç–∞–≤–ª—è–µ–º (–≤–æ–∑–º–æ–∂–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
                    print(f"‚è≥ Kept recent orphaned file: {file_path.name} (age: {datetime.now() - file_mtime})")
                    kept += 1
                    
            except Exception as e:
                print(f"‚ùå Error processing file {file_path.name}: {e}")
                errors += 1
        
        stats = {"deleted": deleted, "errors": errors, "kept": kept}
        
        print(f"\nüìä Cleanup statistics:")
        print(f"   Deleted: {deleted}")
        print(f"   Kept: {kept}")
        print(f"   Errors: {errors}")
        print(f"{'='*60}\n")
        
        return stats
    
    async def cleanup_old_temp_files(self, hours: int = 24) -> int:
        """
        –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
        –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç –ø—Ä–µ—Ñ–∏–∫—Å temp_ –∏–ª–∏ _temp.
        
        Args:
            hours: –í–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–æ–≤ –≤ —á–∞—Å–∞—Ö
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        if not self.upload_dir.exists():
            return 0
        
        deleted = 0
        cutoff_time = datetime.now() - timedelta(hours=hours)
        
        for pattern in ["temp_*", "*_temp.*"]:
            for file_path in self.upload_dir.glob(pattern):
                if not file_path.is_file():
                    continue
                
                try:
                    file_mtime = datetime.fromtimestamp(file_path.stat().st_mtime)
                    
                    if file_mtime < cutoff_time:
                        file_path.unlink()
                        print(f"üóëÔ∏è  Deleted temp file: {file_path.name}")
                        deleted += 1
                        
                except Exception as e:
                    print(f"‚ùå Error deleting temp file {file_path.name}: {e}")
        
        return deleted


async def run_periodic_cleanup(interval_hours: int = 1, max_file_age_hours: int = 48):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É orphaned —Ñ–∞–π–ª–æ–≤.
    
    Args:
        interval_hours: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –≤ —á–∞—Å–∞—Ö
        max_file_age_hours: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    cleanup_service = CleanupService()
    
    print(f"üîÑ Cleanup service started (interval: {interval_hours}h, max_age: {max_file_age_hours}h)")
    
    while True:
        try:
            await cleanup_service.cleanup_orphaned_files(max_age_hours=max_file_age_hours)
            await cleanup_service.cleanup_old_temp_files(hours=24)
        except Exception as e:
            print(f"‚ùå Cleanup error: {e}")
            import traceback
            traceback.print_exc()
        
        # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        await asyncio.sleep(interval_hours * 3600)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ cleanup
async def manual_cleanup():
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ cleanup –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    cleanup_service = CleanupService()
    stats = await cleanup_service.cleanup_orphaned_files(max_age_hours=48)
    temp_deleted = await cleanup_service.cleanup_old_temp_files(hours=24)
    
    print(f"\n‚úÖ Manual cleanup completed:")
    print(f"   Orphaned files: {stats}")
    print(f"   Temp files deleted: {temp_deleted}")


if __name__ == "__main__":
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    asyncio.run(manual_cleanup())


"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.
–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –ª–∏–±–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ –≤—Å–µ–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, –ª–∏–±–æ –Ω–∏—á–µ–≥–æ.
"""
import os
from pathlib import Path
from typing import Dict, Any, Optional, List
from datetime import datetime

from aiogram import Bot
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from database.models.user import User, UserRole, UserStatus
from database.models.document import Document, DocumentType, DocumentStatus
from config.settings import settings


class RegistrationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
    
    def _get_upload_dir(self) -> Path:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫"""
        if os.path.isabs(settings.upload_path):
            upload_dir = Path(settings.upload_path)
        else:
            # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
            project_root = Path(__file__).parent.parent
            upload_dir = project_root / settings.upload_path
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        upload_dir.mkdir(parents=True, exist_ok=True)
        return upload_dir
    
    async def _download_document_from_telegram(
        self, 
        file_id: str, 
        telegram_id: int, 
        doc_type: str
    ) -> Path:
        """
        –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ Telegram –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ –¥–∏—Å–∫
        
        Args:
            file_id: File ID –æ—Ç Telegram
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            doc_type: –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
            
        Returns:
            Path: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
            
        Raises:
            Exception: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
        """
        upload_dir = self._get_upload_dir()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info = await self.bot.get_file(file_id)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        file_extension = "jpg"
        filename = f"{telegram_id}_{doc_type}_{file_id}.{file_extension}"
        file_path = upload_dir / filename
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await self.bot.download_file(file_info.file_path, file_path)
        
        print(f"‚úÖ Document downloaded: {file_path.absolute()}")
        return file_path
    
    async def register_user_with_documents(
        self,
        session: AsyncSession,
        telegram_id: int,
        user_data: Dict[str, Any],
        documents_file_ids: Dict[str, str],
        language: str = "ru"
    ) -> User:
        """
        –ê—Ç–æ–º–∞—Ä–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ –µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
        
        Args:
            session: –°–µ—Å—Å–∏—è SQLAlchemy (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (full_name, phone, email, username)
            documents_file_ids: –°–ª–æ–≤–∞—Ä—å {doc_type: file_id}
            language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            
        Returns:
            User: –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            
        Raises:
            Exception: –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–∞—Ç–∏—Ç—Å—è)
        """
        print(f"\n{'='*60}")
        print(f"üîÑ Starting atomic registration for user {telegram_id}")
        print(f"{'='*60}")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        existing_user = result.scalar_one_or_none()
        
        if existing_user:
            raise ValueError(f"User with telegram_id {telegram_id} already exists")
        
        # 2. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            telegram_id=telegram_id,
            username=user_data.get("username"),
            full_name=user_data.get("full_name"),
            phone=user_data.get("phone"),
            email=user_data.get("email"),
            language=language,
            role=UserRole.CLIENT,
            status=UserStatus.PENDING  # –°—Ç–∞—Ç—É—Å "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"
        )
        
        session.add(user)
        await session.flush()  # –ü–æ–ª—É—á–∞–µ–º user.id
        
        print(f"‚úÖ User created: ID={user.id}, Name={user.full_name}")
        
        # 3. –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        downloaded_files: List[Path] = []
        created_documents: List[Document] = []
        
        try:
            for doc_type, file_id in documents_file_ids.items():
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ enum
                if doc_type == "passport":
                    document_type = DocumentType.PASSPORT
                elif doc_type == "driver_license":
                    document_type = DocumentType.DRIVER_LICENSE
                elif doc_type == "selfie":
                    document_type = DocumentType.SELFIE
                else:
                    raise ValueError(f"Unknown document type: {doc_type}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                print(f"üì• Downloading {doc_type} (file_id: {file_id[:20]}...)")
                file_path = await self._download_document_from_telegram(
                    file_id, telegram_id, doc_type
                )
                downloaded_files.append(file_path)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
                document = Document(
                    user_id=user.id,
                    document_type=document_type,
                    file_path=str(file_path.absolute()),
                    original_filename=file_path.name,
                    file_size=file_path.stat().st_size,
                    status=DocumentStatus.PENDING,
                    uploaded_at=datetime.utcnow()
                )
                
                session.add(document)
                created_documents.append(document)
                
                print(f"‚úÖ Document saved: {doc_type} -> {file_path.name}")
            
            # 4. Commit –≤ —Ä–∞–º–∫–∞—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ –∫–æ–¥–∞
            # (–Ω–µ –¥–µ–ª–∞–µ–º commit –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–¥ –º–æ–≥ –æ—Ç–∫–∞—Ç–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
            
            print(f"‚úÖ Registration complete: {len(created_documents)} documents")
            print(f"{'='*60}\n")
            
            return user
            
        except Exception as e:
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ —É–¥–∞–ª—è–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            print(f"‚ùå Error during registration: {e}")
            print(f"üóëÔ∏è  Rolling back and cleaning up {len(downloaded_files)} files...")
            
            for file_path in downloaded_files:
                try:
                    if file_path.exists():
                        file_path.unlink()
                        print(f"   Deleted: {file_path.name}")
                except Exception as cleanup_error:
                    print(f"   ‚ö†Ô∏è  Failed to delete {file_path.name}: {cleanup_error}")
            
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è rollback —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            raise
    
    async def check_user_exists(self, session: AsyncSession, telegram_id: int) -> Optional[User]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î"""
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        return result.scalar_one_or_none()


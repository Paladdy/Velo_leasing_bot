#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ.
"""

import asyncio
import os
from pathlib import Path
from sqlalchemy import select, update

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
import sys
sys.path.insert(0, str(Path(__file__).parent.parent))

from database.base import async_session_factory
from database.models.document import Document


async def fix_document_paths():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—É—Ç–∏ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
    project_root = Path(__file__).parent.parent
    
    async with async_session_factory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        result = await session.execute(select(Document))
        documents = result.scalars().all()
        
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {len(documents)}")
        
        updated_count = 0
        for doc in documents:
            old_path = doc.file_path
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º
            if not os.path.isabs(old_path):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
                new_path = (project_root / old_path).absolute()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                if new_path.exists():
                    doc.file_path = str(new_path)
                    updated_count += 1
                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ ID {doc.id}:")
                    print(f"   –°—Ç–∞—Ä—ã–π: {old_path}")
                    print(f"   –ù–æ–≤—ã–π:  {new_path}")
                else:
                    print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ ID {doc.id}: {new_path}")
            else:
                # –ü—É—Ç—å —É–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                if not Path(old_path).exists():
                    print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ ID {doc.id}: {old_path}")
        
        if updated_count > 0:
            await session.commit()
            print(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {updated_count}")
        else:
            print(f"\n‚úÖ –í—Å–µ –ø—É—Ç–∏ —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n")
    try:
        await fix_document_paths()
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())


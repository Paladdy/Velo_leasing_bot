import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.base import async_session_factory, init_db
from database.models.bike import Bike, Battery, BikeStatus, BatteryStatus
from sqlalchemy import select, text


async def add_test_bikes():
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    await init_db()
    
    async with async_session_factory() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã
        existing_bikes = await session.execute(text("SELECT COUNT(*) FROM bikes"))
        count = existing_bikes.scalar()
        
        if count > 0:
            print(f"–í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {count} –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã
        bikes_data = [
            {
                "number": "VL001",
                "model": "Urban Cruiser",
                "description": "–£–¥–æ–±–Ω—ã–π –≥–æ—Ä–æ–¥—Å–∫–æ–π –≤–µ–ª–æ—Å–∏–ø–µ–¥",
                "location": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞",
                "price_per_hour": 150.00,
                "price_per_day": 800.00,
                "battery_count": 1
            },
            {
                "number": "VL002", 
                "model": "Mountain Explorer",
                "description": "–ì–æ—Ä–Ω—ã–π –≤–µ–ª–æ—Å–∏–ø–µ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞",
                "location": "–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ",
                "price_per_hour": 200.00,
                "price_per_day": 1200.00,
                "battery_count": 2
            },
            {
                "number": "VL003",
                "model": "Speed Demon",
                "description": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –≤–µ–ª–æ—Å–∏–ø–µ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –µ–∑–¥—ã",
                "location": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞",
                "price_per_hour": 180.00,
                "price_per_day": 1000.00,
                "battery_count": 1
            },
            {
                "number": "VL004",
                "model": "Family Comfort",
                "description": "–°–µ–º–µ–π–Ω—ã–π –≤–µ–ª–æ—Å–∏–ø–µ–¥ —Å –∫–æ—Ä–∑–∏–Ω–æ–π",
                "location": "–î–µ—Ç—Å–∫–∏–π –ø–∞—Ä–∫",
                "price_per_hour": 120.00,
                "price_per_day": 600.00,
                "battery_count": 3
            },
            {
                "number": "VL005",
                "model": "Electric Power",
                "description": "–≠–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥ —Å –º–æ—â–Ω—ã–º –º–æ—Ç–æ—Ä–æ–º",
                "location": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞",
                "price_per_hour": 300.00,
                "price_per_day": 1800.00,
                "battery_count": 2
            }
        ]
        
        for bike_data in bikes_data:
            # –°–æ–∑–¥–∞–µ–º –≤–µ–ª–æ—Å–∏–ø–µ–¥
            bike = Bike(
                number=bike_data["number"],
                model=bike_data["model"],
                description=bike_data["description"],
                location=bike_data["location"],
                price_per_hour=bike_data["price_per_hour"],
                price_per_day=bike_data["price_per_day"],
                status=BikeStatus.AVAILABLE
            )
            session.add(bike)
            await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞
            
            # –°–æ–∑–¥–∞–µ–º –±–∞—Ç–∞—Ä–µ–π–∫–∏ –¥–ª—è –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞
            for i in range(bike_data["battery_count"]):
                battery = Battery(
                    number=f"{bike_data['number']}-BAT{i+1:02d}",
                    bike_id=bike.id,
                    capacity="48V 15Ah",
                    size="Standard",
                    status=BatteryStatus.AVAILABLE
                )
                session.add(battery)
        
        await session.commit()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(bikes_data)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤ —Å –±–∞—Ç–∞—Ä–µ–π–∫–∞–º–∏")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞—Ö
        print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã:")
        for bike_data in bikes_data:
            print(f"üö¥‚Äç‚ôÇÔ∏è {bike_data['number']} - {bike_data['model']} ({bike_data['battery_count']} –±–∞—Ç–∞—Ä–µ–µ–∫)")


if __name__ == "__main__":
    asyncio.run(add_test_bikes()) 
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from database.base import async_session_factory
from database.models.user import User, UserStatus
from database.models.bike import Bike, BikeStatus
from bot.keyboards.client import get_rental_type_keyboard, get_bikes_keyboard, get_duration_keyboard, get_rental_confirmation_keyboard
from bot.states.rental import RentalStates
from services.settings_service import SettingsService
from bot.utils.translations import get_text, get_user_language

router = Router()


# –°–¢–ê–†–´–ô –ö–û–î –î–ò–°–¢–ê–ù–¶–ò–û–ù–ù–û–ô –ê–†–ï–ù–î–´ - –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù –ü–û –¢–†–ï–ë–û–í–ê–ù–ò–Æ –ó–ê–ö–ê–ó–ß–ò–ö–ê
# @router.message(F.text == "üö¥‚Äç‚ôÇÔ∏è –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å")
# async def start_rental_process(message: Message, state: FSMContext):
#     """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—Ä–µ–Ω–¥—ã –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞"""
#     telegram_id = message.from_user.id
#     
#     async with async_session_factory() as session:
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         result = await session.execute(
#             select(User).where(User.telegram_id == telegram_id)
#         )
#         user = result.scalar_one_or_none()
#         
#         if not user:
#             await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start")
#             return
#             
#         if user.status != UserStatus.VERIFIED:
#             status_text = {
#                 UserStatus.PENDING: "‚è≥ –í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
#                 UserStatus.REJECTED: "‚ùå –í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
#                 UserStatus.BLOCKED: "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
#             }
#             await message.answer(
#                 f"{status_text.get(user.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')}\n\n"
#                 "üìÑ –î–ª—è –∞—Ä–µ–Ω–¥—ã –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
#             )
#             return
#     
#     # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞—Ä–µ–Ω–¥—ã
#     await message.answer(
#         "üö¥‚Äç‚ôÇÔ∏è **–ê—Ä–µ–Ω–¥–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞**\n\n"
#         "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ä–µ–Ω–¥—ã:",
#         reply_markup=get_rental_type_keyboard()
#     )
#     await state.set_state(RentalStates.choosing_rental_type)

# –ù–û–í–´–ô –ö–û–î - –¢–û–õ–¨–ö–û –û–ß–ù–ê–Ø –ê–†–ï–ù–î–ê
@router.message(F.text.in_(["üö¥‚Äç‚ôÇÔ∏è –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å", "üö¥‚Äç‚ôÇÔ∏è –ò“∑–æ—Ä–∞ –∫–∞—Ä–¥–∞–Ω", "üö¥‚Äç‚ôÇÔ∏è Ijaraga olish", "üö¥‚Äç‚ôÇÔ∏è –ò–∂–∞—Ä–∞–≥–∞ –∞–ª—É—É"]))
async def show_rental_contacts(message: Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
    await state.clear()
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞"""
    telegram_id = message.from_user.id
    
    async with async_session_factory() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            lang = "ru"
            await message.answer(get_text("start.user_not_found", lang))
            return
        
        lang = get_user_language(user)
            
        if user.status != UserStatus.VERIFIED:
            status_key = {
                UserStatus.PENDING: "rental.status_pending",
                UserStatus.REJECTED: "rental.status_rejected",
                UserStatus.BLOCKED: "rental.status_blocked"
            }
            status_msg = get_text(status_key.get(user.status, "status.unknown"), lang)
            await message.answer(
                f"{status_msg}\n\n"
                f"{get_text('rental.verification_required', lang)}"
            )
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    settings = await SettingsService.get_settings()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã
    contact_text = (
        f"{get_text('rental.title', lang)}\n\n"
        f"{get_text('rental.our_address', lang, address=settings.address)}\n\n"
        f"{get_text('rental.our_phone', lang, phone=settings.phone)}\n\n"
        f"{get_text('rental.working_hours', lang, hours=settings.formatted_working_hours)}\n\n"
        f"{get_text('rental.how_to_rent', lang)}\n\n"
        f"{get_text('rental.see_you', lang)}"
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∑–≤–æ–Ω–∫–∞ (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã)
    phone_clean = settings.phone.replace(" ", "").replace("-", "").replace("(", "").replace(")", "")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ—á–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∫–∞—Ä—Ç—ã –•–∏–º–∫–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –•–∏–º–æ–∫: 55.8970, 37.4297
    map_url = "https://yandex.ru/maps/?text=—É–ª–∏—Ü–∞+–†–∞–±–æ—á–∞—è+2–∞+–•–∏–º–∫–∏&ll=37.4297%2C55.8970&z=16"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_text("rental.show_on_map", lang), url=map_url)]
        # [InlineKeyboardButton(text="üìã –ú–æ–∏ –∞—Ä–µ–Ω–¥—ã", callback_data="my_rentals")]  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–∏ –æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥–µ
    ])
    
    await message.answer(contact_text, reply_markup=keyboard)


# –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û - –ù–ï –ù–£–ñ–ù–û –ü–†–ò –û–ß–ù–û–ô –ú–û–î–ï–õ–ò –ê–†–ï–ù–î–´
# @router.callback_query(F.data == "my_rentals")
# async def show_my_rentals(callback: CallbackQuery, state: FSMContext):
#     """–ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä–µ–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
#     await callback.message.edit_text(
#         "üìã **–ú–æ–∏ –∞—Ä–µ–Ω–¥—ã**\n\n"
#         "üöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
#         "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:\n"
#         "‚Ä¢ –¢–µ–∫—É—â–∏–µ –∞—Ä–µ–Ω–¥—ã\n"
#         "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∞—Ä–µ–Ω–¥\n"
#         "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è\n"
#         "‚Ä¢ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π\n\n"
#         "üí° –ü–æ–∫–∞ —á—Ç–æ –≤—Å–µ –∞—Ä–µ–Ω–¥—ã –æ—Ñ–æ—Ä–º–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –æ—Ñ–∏—Å–µ.",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="üö¥‚Äç‚ôÇÔ∏è –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å", callback_data="rental_contacts")]
#         ])
#     )
# 
# 
# @router.callback_query(F.data == "rental_contacts")
# async def show_contacts_callback(callback: CallbackQuery, state: FSMContext):
#     """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã —á–µ—Ä–µ–∑ callback"""
#     fake_message = type('obj', (object,), {
#         'answer': callback.message.edit_text,
#         'from_user': callback.from_user
#     })()
#     await show_rental_contacts(fake_message, state)


# ==================================================================================
# –°–¢–ê–†–´–ô –ö–û–î –î–ò–°–¢–ê–ù–¶–ò–û–ù–ù–û–ô –ê–†–ï–ù–î–´ - –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù –ü–û –¢–†–ï–ë–û–í–ê–ù–ò–Æ –ó–ê–ö–ê–ó–ß–ò–ö–ê
# ==================================================================================
# 
# @router.callback_query(F.data.startswith("rental_type_"))
# async def process_rental_type(callback: CallbackQuery, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞—Ä–µ–Ω–¥—ã"""
#     rental_type = callback.data.split("_", 2)[2]  # rental_type_hourly -> hourly
#     
#     await state.update_data(rental_type=rental_type)
#     
#     if rental_type == "custom":
#         await callback.message.edit_text(
#             "üéØ **–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞**\n\n"
#             "–î–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∞—Ä–µ–Ω–¥—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
#             "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: @admin_username",
#             reply_markup=None
#         )
#         await state.clear()
#         return
#     elif rental_type == "installment":
#         await callback.message.edit_text(
#             "üõí **–í—ã–∫—É–ø —Å —Ä–∞—Å—Å—Ä–æ—á–∫–æ–π**\n\n"
#             "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ä–æ—á–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
#             "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: @admin_username",
#             reply_markup=None
#         )
#         await state.clear()
#         return
#     
#     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã
#     await show_available_bikes(callback.message, state)
# 
# 
# @router.callback_query(F.data == "rental_onsite")
# async def process_onsite_rental(callback: CallbackQuery, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞ –º–µ—Å—Ç–µ"""
#     await callback.message.edit_text(
#         "üè™ **–í—ã–±–æ—Ä –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –Ω–∞ –º–µ—Å—Ç–µ**\n\n"
#         "üìç **–ê–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –≤—ã–¥–∞—á–∏:**\n"
#         "—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 123\n\n"
#         "üïê **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:**\n"
#         "–ü–Ω-–í—Å: 09:00 - 21:00\n\n"
#         "üìû **–¢–µ–ª–µ—Ñ–æ–Ω:**\n"
#         "+7 (999) 123-45-67\n\n"
#         "üí° –ü—Ä–∏–µ–∑–∂–∞–π—Ç–µ –∫ –Ω–∞–º, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥!",
#         reply_markup=None
#     )
#     await state.clear()
# 
# 
# async def show_available_bikes(message: Message, state: FSMContext):
#     """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã"""
#     async with async_session_factory() as session:
#         # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã —Å –±–∞—Ç–∞—Ä–µ–π–∫–∞–º–∏
#         result = await session.execute(
#             select(Bike)
#             .options(selectinload(Bike.batteries))
#             .where(Bike.status == BikeStatus.AVAILABLE)
#             .order_by(Bike.number)
#         )
#         bikes = result.scalars().all()
#         
#         if not bikes:
#             await message.edit_text(
#                 "üòî **–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤**\n\n"
#                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
#                 reply_markup=None
#             )
#             await state.clear()
#             return
#         
#         data = await state.get_data()
#         rental_type = data.get("rental_type", "hourly")
#         
#         type_text = {
#             "hourly": "‚è∞ –ü–æ—á–∞—Å–æ–≤–∞—è –∞—Ä–µ–Ω–¥–∞",
#             "daily": "üìÖ –ü–æ—Å—É—Ç–æ—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞"
#         }
#         
#         await message.edit_text(
#             f"üö¥‚Äç‚ôÇÔ∏è **{type_text.get(rental_type)}**\n\n"
#             f"–î–æ—Å—Ç—É–ø–Ω–æ –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤: {len(bikes)}\n"
#             "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥:",
#             reply_markup=get_bikes_keyboard(bikes)
#         )
#         await state.set_state(RentalStates.choosing_bike)
# 
# 
# @router.callback_query(F.data.startswith("select_bike_"))
# async def process_bike_selection(callback: CallbackQuery, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞"""
#     bike_id = int(callback.data.split("_")[2])
#     
#     async with async_session_factory() as session:
#         result = await session.execute(
#             select(Bike)
#             .options(selectinload(Bike.batteries))
#             .where(Bike.id == bike_id)
#         )
#         bike = result.scalar_one_or_none()
#         
#         if not bike or bike.status != BikeStatus.AVAILABLE:
#             await callback.answer("‚ùå –í–µ–ª–æ—Å–∏–ø–µ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
#             return
#         
#         await state.update_data(bike_id=bike_id, bike=bike)
#         
#         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
#         data = await state.get_data()
#         rental_type = data.get("rental_type")
#         
#         battery_info = ""
#         if bike.batteries:
#             battery_numbers = [b.number for b in bike.batteries]
#             battery_info = f"\nüîã –ë–∞—Ç–∞—Ä–µ–π–∫–∏: {', '.join(battery_numbers)}"
#         
#         await callback.message.edit_text(
#             f"‚úÖ **–í—ã–±—Ä–∞–Ω –≤–µ–ª–æ—Å–∏–ø–µ–¥:**\n"
#             f"üö¥‚Äç‚ôÇÔ∏è #{bike.number} - {bike.model}\n"
#             f"üìç {bike.location or '–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞'}{battery_info}\n\n"
#             "‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã:",
#             reply_markup=get_duration_keyboard(rental_type)
#         )
#         await state.set_state(RentalStates.choosing_duration)
# 
# 
# @router.callback_query(F.data.startswith("duration_"))
# async def process_duration_selection(callback: CallbackQuery, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
#     duration = callback.data.split("_")[1]  # duration_3h -> 3h
#     
#     await state.update_data(duration=duration)
#     
#     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
#     await show_rental_confirmation(callback.message, state)
# 
# 
# async def show_rental_confirmation(message: Message, state: FSMContext):
#     """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã"""
#     data = await state.get_data()
#     bike = data.get("bike")
#     rental_type = data.get("rental_type")
#     duration = data.get("duration")
#     
#     # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
#     if duration.endswith("h"):
#         hours = int(duration[:-1])
#         duration_text = f"{hours} —á–∞—Å(–æ–≤)"
#         if rental_type == "hourly":
#             total_cost = hours * float(bike.price_per_hour)
#         else:
#             total_cost = float(bike.price_per_day)  # –ó–∞ –¥–µ–Ω—å
#     else:  # days
#         days = int(duration[:-1])
#         duration_text = f"{days} –¥–µ–Ω—å(–¥–Ω–µ–π)"
#         total_cost = days * float(bike.price_per_day)
#     
#     type_text = {
#         "hourly": "‚è∞ –ü–æ—á–∞—Å–æ–≤–∞—è",
#         "daily": "üìÖ –ü–æ—Å—É—Ç–æ—á–Ω–∞—è"
#     }
#     
#     battery_info = ""
#     if bike.batteries:
#         battery_numbers = [b.number for b in bike.batteries]
#         battery_info = f"\nüîã –ë–∞—Ç–∞—Ä–µ–π–∫–∏: {', '.join(battery_numbers)}"
#     
#     confirmation_text = (
#         f"üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã**\n\n"
#         f"üö¥‚Äç‚ôÇÔ∏è –í–µ–ª–æ—Å–∏–ø–µ–¥: #{bike.number} - {bike.model}\n"
#         f"üìç –õ–æ–∫–∞—Ü–∏—è: {bike.location or '–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞'}{battery_info}\n"
#         f"üìÖ –¢–∏–ø –∞—Ä–µ–Ω–¥—ã: {type_text.get(rental_type)}\n"
#         f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}\n"
#         f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:.2f} ‚ÇΩ**\n\n"
#         f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∞—Ä–µ–Ω–¥—É?"
#     )
#     
#     await message.edit_text(
#         confirmation_text,
#         reply_markup=get_rental_confirmation_keyboard()
#     )
#     await state.set_state(RentalStates.confirming_rental)
# 
# 
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
# @router.callback_query(F.data == "back_to_rental_type")
# async def back_to_rental_type(callback: CallbackQuery, state: FSMContext):
#     """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∞—Ä–µ–Ω–¥—ã"""
#     await callback.message.edit_text(
#         "üö¥‚Äç‚ôÇÔ∏è **–ê—Ä–µ–Ω–¥–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞**\n\n"
#         "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ä–µ–Ω–¥—ã:",
#         reply_markup=get_rental_type_keyboard()
#     )
#     await state.set_state(RentalStates.choosing_rental_type)
# 
# 
# @router.callback_query(F.data == "back_to_main")
# async def back_to_main(callback: CallbackQuery, state: FSMContext):
#     """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
#     await callback.message.delete()
#     await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
#     await state.clear()
# 
# 
# @router.callback_query(F.data == "cancel_rental")
# async def cancel_rental(callback: CallbackQuery, state: FSMContext):
#     """–û—Ç–º–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã"""
#     await callback.message.edit_text("‚ùå –ê—Ä–µ–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
#     await state.clear()
# 
# ================================================================================== 
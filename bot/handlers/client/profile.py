from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from database.base import async_session_factory
from database.models.user import User, UserStatus
from database.models.document import Document, DocumentStatus, DocumentType
from bot.keyboards.common import get_language_selection_keyboard
from bot.utils.i18n import change_user_language, get_language_name
from bot.utils.translations import get_text, get_user_language

router = Router()


@router.message(F.text.in_(["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üë§ –ü—Ä–æ—Ñ–∏–ª"]))
async def show_profile(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = message.from_user.id
    
    async with async_session_factory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        result = await session.execute(
            select(User)
            .options(selectinload(User.documents))
            .where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            lang = "ru"
            await message.answer(get_text("start.user_not_found", lang))
            return
        
        lang = get_user_language(user)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        status_key = {
            UserStatus.PENDING: "profile.status_pending",
            UserStatus.VERIFIED: "profile.status_verified",
            UserStatus.REJECTED: "profile.status_rejected",
            UserStatus.BLOCKED: "profile.status_blocked"
        }
        
        registration_date = user.created_at.strftime("%d.%m.%Y") if user.created_at else get_text("status.unknown", lang)
        verification_date = user.verified_at.strftime("%d.%m.%Y") if user.verified_at else get_text("profile.not_verified", lang)
        
        username_text = get_text("profile.username", lang, username=user.username) if user.username else get_text("profile.username_not_set", lang)
        phone_text = get_text("profile.phone", lang, phone=user.phone) if user.phone else get_text("profile.phone_not_set", lang)
        email_text = get_text("profile.email", lang, email=user.email) if user.email else get_text("profile.email_not_set", lang)
        
        profile_text = [
            get_text("profile.title", lang) + "\n",
            get_text("profile.personal_data", lang),
            get_text("profile.name", lang, name=user.full_name),
            username_text,
            phone_text,
            email_text,
            get_text("profile.role", lang, role=user.role.value),
            get_text("profile.language", lang, language=get_language_name(user.language)),
            "",
            get_text("profile.account_status", lang),
            get_text(status_key.get(user.status, "status.unknown"), lang),
            get_text("profile.registration_date", lang, date=registration_date),
            get_text("profile.verification_date", lang, date=verification_date),
            "",
            get_text("profile.documents_title", lang)
        ]
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
        if not user.documents:
            profile_text.append(get_text("profile.no_documents", lang))
        else:
            doc_status_emoji = {
                DocumentStatus.PENDING: "‚è≥",
                DocumentStatus.APPROVED: "‚úÖ",
                DocumentStatus.REJECTED: "‚ùå",
                DocumentStatus.REVISION: "üîÑ"
            }
            
            for doc in user.documents:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
                doc_name = get_text(f"documents.{doc.document_type.value}", lang)
                status_emoji = doc_status_emoji.get(doc.status, "‚ùì")
                upload_date = doc.uploaded_at.strftime("%d.%m.%Y") if doc.uploaded_at else get_text("status.unknown", lang)
                
                profile_text.append(f"‚Ä¢ {status_emoji} {doc_name} - {upload_date}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if user.documents:
            keyboard.append([InlineKeyboardButton(text=get_text("profile.view_documents", lang), callback_data="profile_view_documents")])
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        keyboard.append([InlineKeyboardButton(text=get_text("profile.edit_profile", lang), callback_data="profile_edit")])
        
        # –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
        keyboard.append([InlineKeyboardButton(text=get_text("profile.change_language", lang), callback_data="profile_change_language")])
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        if user.status in [UserStatus.REJECTED, UserStatus.BLOCKED]:
            keyboard.append([InlineKeyboardButton(text=get_text("profile.resubmit", lang), callback_data="profile_resubmit")])
        
        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard) if keyboard else None
        
        await message.answer(
            "\n".join(profile_text),
            reply_markup=inline_keyboard
        )


@router.callback_query(F.data == "profile_view_documents")
async def view_user_documents(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = callback.from_user.id
    
    async with async_session_factory() as session:
        result = await session.execute(
            select(User)
            .options(selectinload(User.documents))
            .where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user or not user.documents:
            await callback.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        keyboard = []
        
        doc_types = {
            DocumentType.PASSPORT: "üìÑ –ü–∞—Å–ø–æ—Ä—Ç",
            DocumentType.DRIVER_LICENSE: "üöó –ü—Ä–∞–≤–∞", 
            DocumentType.SELFIE: "ü§≥ –°–µ–ª—Ñ–∏"
        }
        
        doc_status_emoji = {
            DocumentStatus.PENDING: "‚è≥",
            DocumentStatus.APPROVED: "‚úÖ",
            DocumentStatus.REJECTED: "‚ùå",
            DocumentStatus.REVISION: "üîÑ"
        }
        
        for doc in user.documents:
            doc_name = doc_types.get(doc.document_type, "–î–æ–∫—É–º–µ–Ω—Ç")
            status_emoji = doc_status_emoji.get(doc.status, "‚ùì")
            
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{status_emoji} {doc_name}",
                    callback_data=f"profile_doc_{doc.id}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile_back")])
        
        status_text = {
            UserStatus.PENDING: "‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
            UserStatus.VERIFIED: "‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω",
            UserStatus.REJECTED: "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω",
            UserStatus.BLOCKED: "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        }
        
        await callback.message.edit_text(
            f"üìÑ **–ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã**\n\n"
            f"üë§ {user.full_name}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_text.get(user.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )


@router.callback_query(F.data.startswith("profile_doc_"))
async def view_profile_document(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    doc_id = int(callback.data.split("_")[-1])
    
    async with async_session_factory() as session:
        result = await session.execute(
            select(Document)
            .options(selectinload(Document.user))
            .where(Document.id == doc_id)
        )
        document = result.scalar_one_or_none()
        
        if not document:
            await callback.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if document.user.telegram_id != callback.from_user.id:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        doc_types = {
            DocumentType.PASSPORT: "üìÑ –ü–∞—Å–ø–æ—Ä—Ç",
            DocumentType.DRIVER_LICENSE: "üöó –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞",
            DocumentType.SELFIE: "ü§≥ –°–µ–ª—Ñ–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º"
        }
        
        status_text = {
            DocumentStatus.PENDING: "‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
            DocumentStatus.APPROVED: "‚úÖ –û–¥–æ–±—Ä–µ–Ω",
            DocumentStatus.REJECTED: "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω",
            DocumentStatus.REVISION: "üîÑ –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
        }
        
        upload_date = document.uploaded_at.strftime("%d.%m.%Y %H:%M") if document.uploaded_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        doc_info = (
            f"üìÑ **{doc_types.get(document.document_type, '–î–æ–∫—É–º–µ–Ω—Ç')}**\n\n"
            f"üÜî ID: {document.id}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_text.get(document.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
            f"üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {upload_date}"
        )
        
        if document.admin_comment:
            doc_info += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{document.admin_comment}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        try:
            photo = FSInputFile(document.file_path)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º", callback_data="profile_view_documents")]
            ])
            
            await callback.message.answer_photo(
                photo=photo,
                caption=doc_info,
                reply_markup=keyboard
            )
        except Exception as e:
            await callback.message.edit_text(
                f"{doc_info}\n\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º", callback_data="profile_view_documents")]
                ])
            )


@router.callback_query(F.data == "profile_change_language")
async def change_language(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    telegram_id = callback.from_user.id
    
    async with async_session_factory() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        current_lang = get_language_name(user.language)
        
        messages = {
            "ru": f"üåê **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞**\n\n–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: {current_lang}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —è–∑—ã–∫:",
            "tg": f"üåê **–ò–≤–∞–∑ –∫–∞—Ä–¥–∞–Ω–∏ –∑–∞–±–æ–Ω**\n\n–ó–∞–±–æ–Ω–∏ “∑–æ—Ä”£: {current_lang}\n\n–ó–∞–±–æ–Ω–∏ –Ω–∞–≤—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
            "uz": f"üåê **Tilni o'zgartirish**\n\nJoriy til: {current_lang}\n\nYangi tilni tanlang:"
        }
        
        await callback.message.edit_text(
            messages.get(user.language, messages["ru"]),
            reply_markup=get_language_selection_keyboard()
        )


@router.callback_query(F.data.startswith("lang_"))
async def process_language_change(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç active state)
    current_state = await state.get_state()
    if current_state is not None:
        # –≠—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å
        return
    
    language = callback.data.split("_")[1]  # lang_ru -> ru
    telegram_id = callback.from_user.id
    
    # –ò–∑–º–µ–Ω—è–µ–º —è–∑—ã–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = await change_user_language(telegram_id, language)
    
    if success:
        lang_name = get_language_name(language)
        
        success_messages = {
            "ru": f"‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {lang_name}",
            "tg": f"‚úÖ –ó–∞–±–æ–Ω –±–∞ {lang_name} –∏–≤–∞–∑ –∫–∞—Ä–¥–∞ —à—É–¥",
            "uz": f"‚úÖ Til {lang_name}ga o'zgartirildi"
        }
        
        await callback.answer(success_messages.get(language, success_messages["ru"]), show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é
        fake_message = type('obj', (object,), {
            'answer': callback.message.edit_text,
            'from_user': callback.from_user
        })()
        await show_profile(fake_message, state)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞", show_alert=True)


@router.callback_query(F.data == "profile_back")
async def back_to_profile(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å"""
    # –≠–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è
    fake_message = type('obj', (object,), {
        'answer': callback.message.edit_text,
        'from_user': callback.from_user
    })()
    await show_profile(fake_message, state) 
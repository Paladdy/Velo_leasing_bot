from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy import select

from database.base import async_session_factory
from database.models.user import User, UserStatus
from database.models.rental import Rental, RentalStatus

router = Router()


@router.message(F.text == "üîß –†–µ–º–æ–Ω—Ç")
async def repair_menu(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–º–æ–Ω—Ç"""
    telegram_id = message.from_user.id
    
    async with async_session_factory() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
            
        if user.status != UserStatus.VERIFIED:
            await message.answer(
                "‚ùå –î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.\n"
                "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        rentals_result = await session.execute(
            select(Rental)
            .where(Rental.user_id == user.id)
            .where(Rental.status == RentalStatus.ACTIVE)
        )
        active_rentals = rentals_result.scalars().all()
    
    repair_text = (
        "üîß **–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç**\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–º –≤–æ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã, "
        "–≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç.\n\n"
        "üìã **–ü—Ä–æ—Ü–µ—Å—Å:**\n"
        "1. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É\n"
        "2. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)\n"
        "3. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ü–µ–Ω–∏—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å\n"
        "4. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É\n\n"
    )
    
    keyboard = []
    
    if active_rentals:
        repair_text += f"üö¥‚Äç‚ôÇÔ∏è **–£ –≤–∞—Å –µ—Å—Ç—å {len(active_rentals)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥**\n"
        keyboard.append([InlineKeyboardButton(text="üîß –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç", callback_data="repair_create")])
    else:
        repair_text += "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥.\n–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç —Å–Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—É–π—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥."
    
    # –ö–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫
    keyboard.append([InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫", callback_data="repair_history")])
    keyboard.append([InlineKeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="repair_faq")])
    
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard) if keyboard else None
    
    await message.answer(repair_text, reply_markup=inline_keyboard)


@router.callback_query(F.data == "repair_create")
async def create_repair_request(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç"""
    await callback.message.edit_text(
        "üîß **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç**\n\n"
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–º:\n"
        "‚Ä¢ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–ª–æ–º–∞–ª–æ—Å—å?\n"
        "‚Ä¢ –ü—Ä–∏ –∫–∞–∫–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö?\n"
        "‚Ä¢ –ù–∞—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä—å–µ–∑–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞?\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="repair_cancel")]
        ])
    )
    await state.set_state(RepairStates.waiting_repair_description)


@router.callback_query(F.data == "repair_history")
async def repair_history(callback: CallbackQuery, state: FSMContext):
    """–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–º–æ–Ω—Ç"""
    await callback.message.edit_text(
        "üìã **–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–º–æ–Ω—Ç**\n\n"
        "üöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–º–æ–Ω—Ç:\n"
        "‚Ä¢ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫\n"
        "‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞\n"
        "‚Ä¢ –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="repair_back")]
        ])
    )


@router.callback_query(F.data == "repair_faq")
async def repair_faq(callback: CallbackQuery, state: FSMContext):
    """–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–µ–º–æ–Ω—Ç—É"""
    faq_text = (
        "‚ùì **–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –†–µ–º–æ–Ω—Ç**\n\n"
        "**Q: –ö—Ç–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç —Ä–µ–º–æ–Ω—Ç?**\n"
        "A: –†–µ–º–æ–Ω—Ç –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–º, –µ—Å–ª–∏ –ø–æ–ª–æ–º–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ –µ–≥–æ –≤–∏–Ω–µ.\n\n"
        "**Q: –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ä–µ–º–æ–Ω—Ç?**\n"
        "A: –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –ø–æ–ª–æ–º–∫–∏.\n\n"
        "**Q: –ö–∞–∫ –¥–æ–ª–≥–æ –¥–ª–∏—Ç—Å—è —Ä–µ–º–æ–Ω—Ç?**\n"
        "A: –û–±—ã—á–Ω–æ –æ—Ç 1 –¥–æ 7 –¥–Ω–µ–π, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
        "**Q: –ß—Ç–æ –µ—Å–ª–∏ –ø–æ–ª–æ–º–∫–∞ –Ω–µ –ø–æ –º–æ–µ–π –≤–∏–Ω–µ?**\n"
        "A: –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - —Ä–µ–º–æ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º.\n\n"
        "**Q: –ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞—Ä–µ–Ω–¥—É –¥—Ä—É–≥–æ–≥–æ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞?**\n"
        "A: –î–∞, –≤—ã –º–æ–∂–µ—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–µ–ª–æ—Å–∏–ø–µ–¥, –ø–æ–∫–∞ –∏–¥–µ—Ç —Ä–µ–º–æ–Ω—Ç."
    )
    
    await callback.message.edit_text(
        faq_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîß –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="repair_create")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="repair_back")]
        ])
    )


@router.callback_query(F.data == "repair_back")
async def back_to_repair_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ä–µ–º–æ–Ω—Ç–∞"""
    fake_message = type('obj', (object,), {
        'answer': callback.message.edit_text,
        'from_user': callback.from_user
    })()
    await repair_menu(fake_message, state)


@router.callback_query(F.data == "repair_cancel")
async def cancel_repair_request(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    await state.clear()
    await back_to_repair_menu(callback, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞
from aiogram.fsm.state import State, StatesGroup

class RepairStates(StatesGroup):
    waiting_repair_description = State()

@router.message(RepairStates.waiting_repair_description, F.text)
async def process_repair_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞"""
    
    if not message.text or len(message.text.strip()) < 10:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ç–æ—á–Ω–µ–µ –æ—Ü–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞."
        )
        return
    
    description = message.text.strip()
    
    await message.answer(
        f"‚úÖ **–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!**\n\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:**\n{description}\n\n"
        f"‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.\n"
        f"üì± –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ —Å–º–µ—Ç–∞.\n\n"
        f"üïê –û–±—ã—á–Ω–æ –æ—Ü–µ–Ω–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 2 —á–∞—Å–æ–≤ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫", callback_data="repair_history")]
        ])
    )
    
    await state.clear()
    
    # TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    print(f"üîß –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç –æ—Ç {message.from_user.full_name}: {description}") 
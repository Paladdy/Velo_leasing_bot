from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, update
from sqlalchemy.orm import selectinload
from datetime import datetime

from database.base import async_session_factory
from database.models.user import User, UserStatus, UserRole
from database.models.document import Document, DocumentStatus, DocumentType
from bot.keyboards.admin import get_document_verification_keyboard
from bot.keyboards.common import get_admin_panel_keyboard

router = Router()





@router.message(F.text == "üìã –î–æ–∫—É–º–µ–Ω—Ç—ã")
@router.callback_query(F.data == "admin_documents")
async def documents_menu(message_or_callback, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è (message –∏–ª–∏ callback)
    if hasattr(message_or_callback, 'message'):
        # –≠—Ç–æ callback
        message = message_or_callback.message
        telegram_id = message_or_callback.from_user.id
        send_method = message.edit_text
    else:
        # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = message_or_callback
        telegram_id = message.from_user.id
        send_method = message.answer
    
    async with async_session_factory() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user or not user.can_verify_documents:
            await send_method("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        unverified_users = await session.execute(
            select(User)
            .where(User.status == UserStatus.PENDING)
            .where(User.role == UserRole.CLIENT)
        )
        unverified_count = len(unverified_users.scalars().all())
        
        verified_users = await session.execute(
            select(User)
            .where(User.status == UserStatus.VERIFIED)
            .where(User.role == UserRole.CLIENT)
        )
        verified_count = len(verified_users.scalars().all())
    
    stats_text = (
        f"üìã **–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**\n\n"
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
        f"‚Ä¢ ‚ùå –ù–µ –ø—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é: {unverified_count}\n"
        f"‚Ä¢ ‚úÖ –ü—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é: {verified_count}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    )
    
    keyboard = [
        [InlineKeyboardButton(text=f"‚ùå –ù–µ –ø—Ä–æ—à–ª–∏ ({unverified_count})", callback_data="admin_users_unverified")],
        [InlineKeyboardButton(text=f"‚úÖ –ü—Ä–æ—à–ª–∏ ({verified_count})", callback_data="admin_users_verified")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]
    
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await send_method(stats_text, reply_markup=inline_keyboard)


@router.callback_query(F.data == "admin_users_unverified")
async def show_unverified_users(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"""
    async with async_session_factory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
        result = await session.execute(
            select(User)
            .options(selectinload(User.documents))
                         .where(User.status == UserStatus.PENDING)
             .where(User.role == UserRole.CLIENT)
            .order_by(User.created_at.desc())
        )
        users = result.scalars().all()
        
        if not users:
            await callback.message.edit_text(
                "‚úÖ **–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç**\n\n"
                "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n"
                "–í—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É! üéâ",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_users_pending")],
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_documents")]
                    ]
                )
            )
            return
        
        users_text = ["üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:**\n"]
        keyboard = []
        
        for user in users:
            # –ü–æ–¥—Å—á–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            pending_docs = [d for d in user.documents if d.status == DocumentStatus.PENDING]
            approved_docs = [d for d in user.documents if d.status == DocumentStatus.APPROVED]
            
            registration_date = user.created_at.strftime("%d.%m.%Y") if user.created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            user_info = (
                f"üë§ **{user.full_name}**\n"
                f"üì± @{user.username or '–±–µ–∑ username'}\n"
                f"üìû {user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {registration_date}\n"
                f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(pending_docs)} –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ, {len(approved_docs)} –æ–¥–æ–±—Ä–µ–Ω–æ\n"
            )
            users_text.append(user_info)
            
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üë§ {user.full_name[:20]}{'...' if len(user.full_name) > 20 else ''}",
                    callback_data=f"admin_user_docs_{user.id}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_documents")])
        
        await callback.message.edit_text(
            "\n\n".join(users_text),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )


@router.callback_query(F.data == "admin_users_verified")
async def show_verified_users(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with async_session_factory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        result = await session.execute(
            select(User)
            .options(selectinload(User.documents))
            .where(User.status == UserStatus.VERIFIED)
            .where(User.role == UserRole.CLIENT)
            .order_by(User.verified_at.desc())
        )
        users = result.scalars().all()
        
        if not users:
            await callback.message.edit_text(
                "‚úÖ **–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç**\n\n"
                "–ü–æ–∫–∞ –Ω–µ—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_users_verified")],
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_documents")]
                    ]
                )
            )
            return
        
        users_text = ["‚úÖ **–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"]
        keyboard = []
        
        for user in users:
            approved_docs = [d for d in user.documents if d.status == DocumentStatus.APPROVED]
            verification_date = user.verified_at.strftime("%d.%m.%Y") if user.verified_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            user_info = (
                f"üë§ **{user.full_name}**\n"
                f"üì± @{user.username or '–±–µ–∑ username'}\n"
                f"üìû {user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {verification_date}\n"
                f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–¥–æ–±—Ä–µ–Ω–æ: {len(approved_docs)}\n"
            )
            users_text.append(user_info)
            
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üë§ {user.full_name[:20]}{'...' if len(user.full_name) > 20 else ''}",
                    callback_data=f"admin_user_docs_{user.id}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_documents")])
        
        await callback.message.edit_text(
            "\n\n".join(users_text),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )


@router.callback_query(F.data.startswith("admin_user_docs_"))
async def show_user_documents(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üîç DEBUG: show_user_documents –≤—ã–∑–≤–∞–Ω —Å callback: {callback.data}")
    user_id = int(callback.data.split("_")[-1])
    print(f"üîç DEBUG: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π User ID: {user_id}")
    
    async with async_session_factory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        result = await session.execute(
            select(User)
            .options(selectinload(User.documents))
            .where(User.id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if not user.documents:
            await callback.message.edit_text(
                f"üë§ **{user.full_name}**\n\n"
                "üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users_pending")]]
                )
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º
        doc_types = {
            DocumentType.PASSPORT: "üìÑ –ü–∞—Å–ø–æ—Ä—Ç",
            DocumentType.DRIVER_LICENSE: "üöó –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞", 
            DocumentType.SELFIE: "ü§≥ –°–µ–ª—Ñ–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º"
        }
        
        status_emoji = {
            DocumentStatus.PENDING: "‚è≥",
            DocumentStatus.APPROVED: "‚úÖ",
            DocumentStatus.REJECTED: "‚ùå",
            DocumentStatus.REVISION: "üîÑ"
        }
        
        docs_text = [
            f"üë§ **{user.full_name}**",
            f"üì± @{user.username or '–±–µ–∑ username'}",
            f"üìû {user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}",
            f"üìß {user.email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n",
            "üìÑ **–î–æ–∫—É–º–µ–Ω—Ç—ã:**"
        ]
        
        keyboard = []
        
        for doc in user.documents:
            doc_type_name = doc_types.get(doc.document_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
            status_text = status_emoji.get(doc.status, "‚ùì")
            upload_date = doc.uploaded_at.strftime("%d.%m.%Y") if doc.uploaded_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            docs_text.append(
                f"{status_text} {doc_type_name} (ID: {doc.id}) - üìÖ {upload_date}"
            )
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üëÅÔ∏è {doc_type_name}",
                    callback_data=f"admin_view_doc_{doc.id}"
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∏ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        pending_docs = [d for d in user.documents if d.status == DocumentStatus.PENDING]
        if pending_docs:
            keyboard.append([
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—Å–µ", callback_data=f"admin_approve_all_{user.id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—Å–µ", callback_data=f"admin_reject_all_{user.id}")
            ])
        
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users_unverified")])
        
        # –ï—Å–ª–∏ —ç—Ç–æ callback —Å —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.edit_text(
                "\n".join(docs_text),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await callback.message.delete()
            except:
                pass
            
            await callback.bot.send_message(
                callback.from_user.id,
                "\n".join(docs_text),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )


@router.callback_query(F.data.startswith("admin_view_doc_"))
async def view_document(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    doc_id = int(callback.data.split("_")[-1])
    
    async with async_session_factory() as session:
        result = await session.execute(
            select(Document)
            .options(selectinload(Document.user))
            .where(Document.id == doc_id)
        )
        document = result.scalar_one_or_none()
        
        if not document:
            await callback.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        doc_types = {
            DocumentType.PASSPORT: "üìÑ –ü–∞—Å–ø–æ—Ä—Ç",
            DocumentType.DRIVER_LICENSE: "üöó –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞",
            DocumentType.SELFIE: "ü§≥ –°–µ–ª—Ñ–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º"
        }
        
        status_text = {
            DocumentStatus.PENDING: "‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
            DocumentStatus.APPROVED: "‚úÖ –û–¥–æ–±—Ä–µ–Ω",
            DocumentStatus.REJECTED: "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω",
            DocumentStatus.REVISION: "üîÑ –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
        }
        
        upload_date = document.uploaded_at.strftime("%d.%m.%Y %H:%M") if document.uploaded_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        doc_info = (
            f"üìÑ **{doc_types.get(document.document_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')}**\n\n"
            f"üÜî ID –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document.id}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {document.user.full_name}\n"
            f"üì± Username: @{document.user.username or '–±–µ–∑ username'}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_text.get(document.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
            f"üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {upload_date}"
        )
        
        if document.admin_comment:
            doc_info += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {document.admin_comment}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        try:
            photo = FSInputFile(document.file_path)
            await callback.message.answer_photo(
                photo=photo,
                caption=doc_info,
                reply_markup=get_document_verification_keyboard(document.id, document.user_id)
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await callback.message.edit_text(
                f"{doc_info}\n\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}",
                reply_markup=get_document_verification_keyboard(document.id, document.user_id)
            )


@router.callback_query(F.data.startswith("doc_approve_"))
async def approve_document(callback: CallbackQuery, state: FSMContext):
    """–û–¥–æ–±—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"""
    doc_id = int(callback.data.split("_")[-1])
    await process_document_verification(callback, doc_id, DocumentStatus.APPROVED, "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω", state)


@router.callback_query(F.data.startswith("doc_reject_"))
async def reject_document(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"""
    doc_id = int(callback.data.split("_")[-1])
    await process_document_verification(callback, doc_id, DocumentStatus.REJECTED, "‚ùå –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω", state)


@router.callback_query(F.data.startswith("doc_revision_"))
async def revision_document(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É"""
    doc_id = int(callback.data.split("_")[-1])
    await process_document_verification(callback, doc_id, DocumentStatus.REVISION, "üîÑ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", state)


async def process_document_verification(callback: CallbackQuery, doc_id: int, new_status: DocumentStatus, success_message: str, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    async with async_session_factory() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞
        admin_result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        admin = admin_result.scalar_one_or_none()
        
        await session.execute(
            update(Document)
            .where(Document.id == doc_id)
            .values(
                status=new_status,
                verified_at=datetime.utcnow(),
                verified_by=admin.id if admin else None
            )
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        doc_result = await session.execute(
            select(Document)
            .options(selectinload(Document.user))
            .where(Document.id == doc_id)
        )
        document = doc_result.scalar_one_or_none()
        
        if document:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–æ–±—Ä–µ–Ω—ã
            user_docs = await session.execute(
                select(Document).where(Document.user_id == document.user_id)
            )
            all_docs = user_docs.scalars().all()
            
            # –ï—Å–ª–∏ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–¥–æ–±—Ä–µ–Ω—ã, –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if all(doc.status == DocumentStatus.APPROVED for doc in all_docs):
                await session.execute(
                    update(User)
                    .where(User.id == document.user_id)
                    .values(status=UserStatus.VERIFIED)
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    bot = callback.bot
                    await bot.send_message(
                        document.user.telegram_id,
                        "üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n"
                        "‚úÖ –í—Å–µ –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
                        "üö¥‚Äç‚ôÇÔ∏è –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã.\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üö¥‚Äç‚ôÇÔ∏è –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å\" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
                    )
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        await session.commit()
        
        await callback.answer(success_message, show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await callback.message.delete()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            
        fake_callback = type('obj', (object,), {
            'data': f"admin_user_docs_{document.user_id}",
            'message': callback.message,
            'from_user': callback.from_user,
            'bot': callback.bot
        })()
        await show_user_documents(fake_callback, state)


@router.callback_query(F.data == "admin_documents_menu")
async def back_to_documents_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    # –≠–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–∫—É–º–µ–Ω—Ç—ã"
    fake_message = type('obj', (object,), {
        'answer': callback.message.edit_text,
        'from_user': callback.from_user
    })()
    await documents_menu(fake_message, state)


@router.callback_query(F.data == "admin_documents_refresh")
async def refresh_documents_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    fake_message = type('obj', (object,), {
        'answer': callback.message.edit_text,
        'from_user': callback.from_user
    })()
    await documents_menu(fake_message, state) 
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy import select

from database.base import async_session_factory
from database.models.user import User
from bot.keyboards.common import get_admin_panel_keyboard, get_manager_panel_keyboard

router = Router()




@router.message(F.text == "üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message, state: FSMContext):
    """–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å"""
    print(f"üö® ADMIN PANEL: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–≤–∞–Ω!")
    
    telegram_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name
    
    print(f"üîç DEBUG: –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    print(f"   - ID: {telegram_id}")
    print(f"   - Username: @{username}")
    print(f"   - Name: {full_name}")
    
    async with async_session_factory() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î: {user is not None}")
        if user:
            print(f"   - –†–æ–ª—å: {user.role.value}")
            print(f"   - is_admin: {user.is_admin}")
            print(f"   - –°—Ç–∞—Ç—É—Å: {user.status.value}")
        
        if not user or not user.is_admin:
            print(f"‚ùå DEBUG: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - user: {user is not None}, is_admin: {user.is_admin if user else False}")
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="admin_documents")],
        [InlineKeyboardButton(text="üö¥‚Äç‚ôÇÔ∏è –í–µ–ª–æ—Å–∏–ø–µ–¥—ã", callback_data="admin_bikes")],
        [
            InlineKeyboardButton(text="üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="admin_tariffs"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        ],
        [
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        ]
    ])
    
    print(f"‚úÖ DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.full_name}")
    
    await message.answer(
        "üë®‚Äçüíº **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å**\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=admin_keyboard
    )
    
    print(f"‚úÖ DEBUG: –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")


@router.message(F.text == "üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–Ω–µ–ª—å") 
async def manager_panel(message: Message, state: FSMContext):
    """–í—Ö–æ–¥ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫—É—é –ø–∞–Ω–µ–ª—å"""
    telegram_id = message.from_user.id
    
    async with async_session_factory() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user or not user.is_staff:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
            return
    
    await message.answer(
        "üë®‚Äçüíº **–ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∞—è –ø–∞–Ω–µ–ª—å**\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_manager_panel_keyboard()
    )


@router.callback_query(F.data == "admin_documents")
async def admin_documents_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    # –≠–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–∫—É–º–µ–Ω—Ç—ã"
    from bot.handlers.admin.document_verification import documents_menu
    fake_message = type('obj', (object,), {
        'answer': callback.message.edit_text,
        'from_user': callback.from_user
    })()
    await documents_menu(fake_message, state)


@router.callback_query(F.data == "admin_bikes")
async def admin_bikes_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤"""
    from bot.keyboards.admin import get_bike_management_keyboard
    await callback.message.edit_text(
        "üö¥‚Äç‚ôÇÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∫–æ–º –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_bike_management_keyboard()
    )


@router.callback_query(F.data == "back_to_admin")
async def back_to_admin_callback(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ callback"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="admin_documents")],
        [InlineKeyboardButton(text="üö¥‚Äç‚ôÇÔ∏è –í–µ–ª–æ—Å–∏–ø–µ–¥—ã", callback_data="admin_bikes")],
        [
            InlineKeyboardButton(text="üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="admin_tariffs"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        ],
        [
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        ]
    ])
    
    await callback.message.edit_text(
        "üë®‚Äçüíº **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=admin_keyboard
    )


@router.callback_query(F.data == "admin_settings")
async def admin_settings_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    from bot.handlers.admin.settings_management import settings_menu
    fake_message = type('obj', (object,), {
        'answer': callback.message.edit_text,
        'from_user': callback.from_user
    })()
    await settings_menu(fake_message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏–∑ ReplyKeyboard –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
@router.message(F.text == "üìã –î–æ–∫—É–º–µ–Ω—Ç—ã")
async def admin_documents_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –î–æ–∫—É–º–µ–Ω—Ç—ã"""
    telegram_id = message.from_user.id
    
    async with async_session_factory() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user or not user.can_verify_documents:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            return
    
    from bot.handlers.admin.document_verification import documents_menu
    await documents_menu(message, state)


@router.message(F.text == "üö¥‚Äç‚ôÇÔ∏è –í–µ–ª–æ—Å–∏–ø–µ–¥—ã")
async def admin_bikes_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –í–µ–ª–æ—Å–∏–ø–µ–¥—ã"""
    telegram_id = message.from_user.id
    
    async with async_session_factory() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user or not user.can_manage_bikes:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞–º–∏")
            return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ bike_management
    from bot.keyboards.admin import get_bike_management_keyboard
    await message.answer(
        "üö¥‚Äç‚ôÇÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∫–æ–º –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_bike_management_keyboard()
    )


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def admin_settings_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    telegram_id = message.from_user.id
    
    async with async_session_factory() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user or not user.is_staff:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            return
    
    from bot.handlers.admin.settings_management import settings_menu
    await settings_menu(message, state) 
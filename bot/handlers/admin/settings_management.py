from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy import select

from database.base import async_session_factory
from database.models.user import User
from services.settings_service import SettingsService

router = Router()


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã"""
    telegram_id = message.from_user.id
    
    async with async_session_factory() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user or not user.is_staff:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = await SettingsService.get_settings()
    
    settings_text = (
        f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã**\n\n"
        f"üè¢ **–ö–æ–º–ø–∞–Ω–∏—è:** {settings.company_name}\n"
        f"üìç **–ê–¥—Ä–µ—Å:** {settings.address}\n"
        f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {settings.phone}\n"
        f"üìß **Email:** {settings.email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"üïê **–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:**\n{settings.formatted_working_hours}\n\n"
        f"üîß **–°—Ç–∞—Ç—É—Å:** {'üöß –¢–µ—Ö—Ä–∞–±–æ—Ç—ã' if settings.maintenance_mode else '‚úÖ –†–∞–±–æ—Ç–∞–µ–º'}"
    )
    
    keyboard = [
        [InlineKeyboardButton(text="üìû –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="settings_contacts")],
        [InlineKeyboardButton(text="üïê –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã", callback_data="settings_hours")],
        [InlineKeyboardButton(text="üîß –†–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç", callback_data="settings_maintenance")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]
    
    await message.answer(
        settings_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@router.callback_query(F.data == "settings_contacts")
async def edit_contacts(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    settings = await SettingsService.get_settings()
    
    contact_text = (
        f"üìû **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤**\n\n"
        f"üìç **–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å:**\n{settings.address}\n\n"
        f"üìû **–¢–µ–∫—É—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω:**\n{settings.phone}\n\n"
        f"üìß **Email:**\n{settings.email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    
    keyboard = [
        [InlineKeyboardButton(text="üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="edit_address")],
        [InlineKeyboardButton(text="üìû –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_phone")],
        [InlineKeyboardButton(text="üìß –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data="edit_email")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings_back")]
    ]
    
    await callback.message.edit_text(
        contact_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@router.callback_query(F.data == "settings_hours")
async def edit_working_hours(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã"""
    settings = await SettingsService.get_settings()
    
    hours_text = (
        f"üïê **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã**\n\n"
        f"**–¢–µ–∫—É—â–∏–µ —á–∞—Å—ã:**\n{settings.formatted_working_hours}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    )
    
    keyboard = [
        [InlineKeyboardButton(text="üìÖ –û–±—â–∏–µ —á–∞—Å—ã (–ü–Ω-–í—Å)", callback_data="edit_general_hours")],
        [InlineKeyboardButton(text="üìã –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏", callback_data="edit_daily_hours")],
        [InlineKeyboardButton(text="üöÄ –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="quick_hours")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings_back")]
    ]
    
    await callback.message.edit_text(
        hours_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@router.callback_query(F.data == "quick_hours")
async def quick_hours_setup(callback: CallbackQuery, state: FSMContext):
    """–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã"""
    quick_text = (
        "üöÄ **–ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:"
    )
    
    keyboard = [
        [InlineKeyboardButton(text="üåÖ 09:00 - 18:00", callback_data="quick_set_09-18")],
        [InlineKeyboardButton(text="üåû 10:00 - 20:00", callback_data="quick_set_10-20")],
        [InlineKeyboardButton(text="üåô 09:00 - 21:00", callback_data="quick_set_09-21")],
        [InlineKeyboardButton(text="üåÉ 11:00 - 22:00", callback_data="quick_set_11-22")],
        [InlineKeyboardButton(text="üïê –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ", callback_data="quick_set_24-7")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_hours")]
    ]
    
    await callback.message.edit_text(
        quick_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@router.callback_query(F.data.startswith("quick_set_"))
async def apply_quick_hours(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –±—ã—Å—Ç—Ä—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–∞—Å–æ–≤"""
    hours_type = callback.data.split("_")[-1]  # quick_set_09-18 -> 09-18
    
    hours_map = {
        "09-18": "–ü–Ω-–í—Å: 09:00 - 18:00",
        "10-20": "–ü–Ω-–í—Å: 10:00 - 20:00", 
        "09-21": "–ü–Ω-–í—Å: 09:00 - 21:00",
        "11-22": "–ü–Ω-–í—Å: 11:00 - 22:00",
        "24-7": "–ü–Ω-–í—Å: –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ"
    }
    
    new_hours = hours_map.get(hours_type, "–ü–Ω-–í—Å: 09:00 - 21:00")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    success = await SettingsService.update_working_hours(general_hours=new_hours)
    
    if success:
        await callback.answer("‚úÖ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", show_alert=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await edit_working_hours(callback, state)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data == "edit_general_hours")
async def start_edit_general_hours(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–∏—Ö —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã"""
    await callback.message.edit_text(
        "üïê **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—â–∏—Ö —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "**–ü–Ω-–í—Å: –ß–ß:–ú–ú - –ß–ß:–ú–ú**\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –ü–Ω-–í—Å: 09:00 - 21:00\n"
        "‚Ä¢ –ü–Ω-–ü—Ç: 10:00 - 19:00, –°–±-–í—Å: 11:00 - 18:00\n"
        "‚Ä¢ –ü–Ω-–í—Å: –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–µ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings_hours")]
        ])
    )
    await state.set_state(SettingsStates.editing_general_hours)


@router.callback_query(F.data == "edit_address")
async def start_edit_address(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞"""
    settings = await SettingsService.get_settings()
    
    await callback.message.edit_text(
        f"üìç **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞**\n\n"
        f"**–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å:**\n{settings.address}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings_contacts")]
        ])
    )
    await state.set_state(SettingsStates.editing_address)


@router.callback_query(F.data == "edit_phone")
async def start_edit_phone(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    settings = await SettingsService.get_settings()
    
    await callback.message.edit_text(
        f"üìû **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞**\n\n"
        f"**–¢–µ–∫—É—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω:**\n{settings.phone}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "+7 XXX XXX XX XX",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings_contacts")]
        ])
    )
    await state.set_state(SettingsStates.editing_phone)


@router.callback_query(F.data == "settings_back")
async def back_to_settings(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    fake_message = type('obj', (object,), {
        'answer': callback.message.edit_text,
        'from_user': callback.from_user
    })()
    await settings_menu(fake_message, state)


# –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
from bot.states.settings import SettingsStates

@router.message(SettingsStates.editing_general_hours, F.text)
async def process_general_hours_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—â–∏—Ö —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã"""
    if not message.text or len(message.text.strip()) < 5:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã")
        return
    
    new_hours = message.text.strip()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    success = await SettingsService.update_working_hours(general_hours=new_hours)
    
    if success:
        await message.answer(
            f"‚úÖ **–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**\n\n"
            f"**–ù–æ–≤—ã–µ —á–∞—Å—ã:**\n{new_hours}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_back")]
            ])
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã")
    
    await state.clear()


@router.message(SettingsStates.editing_address, F.text)
async def process_address_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    if not message.text or len(message.text.strip()) < 10:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    new_address = message.text.strip()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    success = await SettingsService.update_contact_info(address=new_address)
    
    if success:
        await message.answer(
            f"‚úÖ **–ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
            f"**–ù–æ–≤—ã–π –∞–¥—Ä–µ—Å:**\n{new_address}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_back")]
            ])
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞")
    
    await state.clear()


@router.message(SettingsStates.editing_phone, F.text)
async def process_phone_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if not message.text or len(message.text.strip()) < 10:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return
    
    new_phone = message.text.strip()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    success = await SettingsService.update_contact_info(phone=new_phone)
    
    if success:
        await message.answer(
            f"‚úÖ **–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
            f"**–ù–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:**\n{new_phone}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_back")]
            ])
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    
    await state.clear()


# –î—É–±–ª–∏—Ä—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã—à–µ

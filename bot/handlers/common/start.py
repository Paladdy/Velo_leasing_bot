from aiogram import Router, F
from aiogram.types import Message, PhotoSize, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
import os
from pathlib import Path

from database.base import async_session_factory
from database.models.user import User, UserRole, UserStatus
from database.models.document import Document, DocumentType, DocumentStatus
from bot.keyboards.common import get_main_menu_keyboard, get_phone_request_keyboard, get_document_choice_keyboard, get_language_selection_keyboard
from bot.states.registration import RegistrationStates
from config.settings import settings
from bot.utils.i18n import change_user_language, get_language_name
from bot.utils.translations import get_text, get_user_language

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    telegram_id = message.from_user.id
    username = message.from_user.username
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    print(f"üÜî User info: ID={telegram_id}, Username=@{username}, Name={message.from_user.full_name}")
    
    # –û—Ç–ª–∞–¥–∫–∞ - –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message.text}'")
    
    async with async_session_factory() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            await state.clear()
            lang = get_user_language(user)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ telegram_id –≤ ADMIN_IDS
            if telegram_id in settings.admin_ids and user.role != UserRole.ADMIN:
                user.role = UserRole.ADMIN
                user.status = UserStatus.VERIFIED
                await session.commit()
                print(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {user.full_name} (ID: {telegram_id})")
            
            keyboard = get_main_menu_keyboard(is_staff=user.is_staff, role=user.role.value, language=lang)
            
            welcome_text = get_text("start.welcome_back", lang, name=user.full_name)
            if user.is_admin:
                welcome_text += get_text("start.admin_rights", lang)
            elif user.is_manager:
                welcome_text += get_text("start.manager_rights", lang)
            
            await message.answer(welcome_text, reply_markup=keyboard)
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
            await message.answer(
                get_text("language_selection.choose", "ru"),
                reply_markup=get_language_selection_keyboard()
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º telegram_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            await state.update_data(telegram_id=telegram_id, username=username)
            await state.set_state(RegistrationStates.choosing_language)


@router.callback_query(F.data.startswith("lang_"))
async def process_language_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    language = callback.data.split("_")[1]  # lang_ru -> ru
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(language=language)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    lang_name = get_language_name(language)
    language_selected = get_text("language_selection.changed", language).replace(
        get_language_name("ru") if language == "ru" else 
        get_language_name("tg") if language == "tg" else 
        get_language_name("uz"),
        lang_name
    )
    
    welcome_msg = f"{language_selected}\n\n{get_text('start.welcome_new', language)}"
    
    await callback.message.edit_text(
        welcome_msg,
        reply_markup=None
    )
    await state.set_state(RegistrationStates.waiting_for_name)


@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    data = await state.get_data()
    lang = data.get('language', 'ru')
    
    if not message.text or len(message.text.strip()) < 2:
        await message.answer(get_text("registration.name_error", lang))
        return
    
    await state.update_data(full_name=message.text.strip())
    
    await message.answer(
        get_text("registration.enter_phone", lang),
        reply_markup=get_phone_request_keyboard(lang)
    )
    await state.set_state(RegistrationStates.waiting_for_phone)


@router.message(RegistrationStates.waiting_for_phone, F.contact)
async def process_phone_contact(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç"""
    phone = message.contact.phone_number
    await process_phone_number(message, state, phone)


@router.message(RegistrationStates.waiting_for_phone)
async def process_phone_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–º"""
    data = await state.get_data()
    lang = data.get('language', 'ru')
    
    if not message.text:
        await message.answer(get_text("registration.phone_error", lang))
        return
    
    phone = message.text.strip()
    await process_phone_number(message, state, phone)


async def process_phone_number(message: Message, state: FSMContext, phone: str):
    """–û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await state.update_data(phone=phone)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    telegram_id = message.from_user.id
    username = message.from_user.username
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π)
    language = data.get('language', 'ru')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ ADMIN_IDS
    role = UserRole.ADMIN if telegram_id in settings.admin_ids else UserRole.CLIENT
    status = UserStatus.VERIFIED if telegram_id in settings.admin_ids else UserStatus.PENDING
    
    async with async_session_factory() as session:
        user = User(
            telegram_id=telegram_id,
            username=username,
            full_name=data['full_name'],
            phone=phone,
            role=role,
            status=status,
            language=language
        )
        session.add(user)
        await session.commit()
        
        if role == UserRole.ADMIN:
            print(f"‚úÖ –ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.full_name} (ID: {telegram_id})")
    
    await message.answer(
        get_text("registration.registration_complete", language),
        reply_markup=get_document_choice_keyboard(language)
    )
    await state.set_state(RegistrationStates.choosing_document_type)


@router.callback_query(F.data == "doc_choice_passport")
async def choose_passport(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"""
    data = await state.get_data()
    lang = data.get('language', 'ru')
    
    await state.update_data(chosen_document_type="passport")
    await callback.message.edit_text(
        get_text("documents.upload_passport", lang),
        reply_markup=None
    )
    await state.set_state(RegistrationStates.waiting_for_main_document)


@router.callback_query(F.data == "doc_choice_license")
async def choose_license(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"""
    data = await state.get_data()
    lang = data.get('language', 'ru')
    
    await state.update_data(chosen_document_type="driver_license")
    await callback.message.edit_text(
        get_text("documents.upload_license", lang),
        reply_markup=None
    )
    await state.set_state(RegistrationStates.waiting_for_main_document)


@router.message(RegistrationStates.waiting_for_main_document, F.photo)
async def process_main_document_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–ø–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ –ø—Ä–∞–≤–∞)"""
    data = await state.get_data()
    lang = data.get('language', 'ru')
    doc_type_str = data.get('chosen_document_type', 'passport')
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ enum
    doc_type = DocumentType.PASSPORT if doc_type_str == 'passport' else DocumentType.DRIVER_LICENSE
    
    if doc_type == DocumentType.PASSPORT:
        response_text = get_text("documents.passport_received", lang)
    else:
        response_text = get_text("documents.license_received", lang)
    
    await save_document_photo(message, state, doc_type, response_text)
    await state.set_state(RegistrationStates.waiting_for_selfie)


@router.message(RegistrationStates.waiting_for_selfie, F.photo)
async def process_selfie_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–ª—Ñ–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º"""
    data = await state.get_data()
    lang = data.get('language', 'ru')
    
    await save_document_photo(message, state, DocumentType.SELFIE,
                             get_text("documents.selfie_received", lang))
    
    await message.answer(
        get_text("registration.thank_you", lang),
        reply_markup=get_main_menu_keyboard(is_staff=False, language=lang)
    )
    await state.set_state(RegistrationStates.registration_complete)


async def save_document_photo(message: Message, state: FSMContext, doc_type: DocumentType, response_text: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    telegram_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    upload_dir = Path(settings.upload_path)
    upload_dir.mkdir(exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    file_extension = "jpg"
    filename = f"{telegram_id}_{doc_type.value}_{photo.file_id}.{file_extension}"
    file_path = upload_dir / filename
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await message.bot.get_file(photo.file_id)
        await message.bot.download_file(file_info.file_path, file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with async_session_factory() as session:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(User).where(User.telegram_id == telegram_id)
            )
            user = result.scalar_one_or_none()
            
            if user:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–æ–∫—É–º–µ–Ω—Ç–∞
                document = Document(
                    user_id=user.id,
                    document_type=doc_type,
                    file_path=str(file_path),
                    original_filename=filename,
                    file_size=photo.file_size,
                    status=DocumentStatus.PENDING
                )
                session.add(document)
                await session.commit()
        
        await message.answer(response_text)
        
    except Exception as e:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        lang = data.get('language', 'ru')
        await message.answer(get_text("documents.save_error", lang))
        print(f"Error saving document: {e}")


@router.message(F.text.in_(["‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚óÄÔ∏è –ë–æ–∑–≥–∞—à—Ç", "‚óÄÔ∏è Orqaga"]))
async def back_to_main_menu(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    telegram_id = message.from_user.id
    
    async with async_session_factory() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if user:
            await state.clear()
            lang = get_user_language(user)
            keyboard = get_main_menu_keyboard(is_staff=user.is_staff, role=user.role.value, language=lang)
            await message.answer(get_text("common.main_menu", lang), reply_markup=keyboard)


@router.message(RegistrationStates.waiting_for_main_document)
@router.message(RegistrationStates.waiting_for_selfie)
async def handle_non_photo_in_document_states(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ-—Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    data = await state.get_data()
    lang = data.get('language', 'ru')
    current_state = await state.get_state()
    
    doc_names = {
        "ru": {"passport": "–ø–∞—Å–ø–æ—Ä—Ç–∞", "license": "–≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤", "selfie": "—Å–µ–ª—Ñ–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º"},
        "tg": {"passport": "—à–∏–Ω–æ—Å–Ω–æ–º–∞–∏ –≥—Ä–∞–∂–¥–∞–Ω”£", "license": "–∏“∑–æ–∑–∞—Ç–Ω–æ–º–∞–∏ —Ä–æ–Ω–∞–Ω–¥–∞–≥”£", "selfie": "—Å–µ–ª—Ñ”£ –±–æ “≥—É“∑“∑–∞—Ç"},
        "uz": {"passport": "pasport", "license": "haydovchilik guvohnomasi", "selfie": "hujjat bilan selfi"}
    }
    
    if current_state == RegistrationStates.waiting_for_main_document:
        doc_type_str = data.get('chosen_document_type', 'passport')
        doc_key = "passport" if doc_type_str == 'passport' else "license"
    else:
        doc_key = "selfie"
    
    doc_name = doc_names.get(lang, doc_names["ru"]).get(doc_key, "")
    await message.answer(get_text("documents.photo_required", lang, doc_name=doc_name))


@router.message(Command("admin"))
async def cmd_admin(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /admin –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    print(f"üö® ADMIN COMMAND: –ö–æ–º–∞–Ω–¥–∞ /admin –≤—ã–∑–≤–∞–Ω–∞!")
    
    telegram_id = message.from_user.id
    print(f"üîç User ID: {telegram_id}")
    
    async with async_session_factory() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            lang = "ru"
            await message.answer(get_text("start.user_not_found", lang))
            return
            
        lang = get_user_language(user)
        print(f"üîç User found: {user.full_name}, role: {user.role.value}, is_admin: {user.is_admin}")
        
        if not user.is_admin:
            await message.answer(get_text("admin.no_permissions", lang))
            return
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="admin_documents")],
            [InlineKeyboardButton(text="üö¥‚Äç‚ôÇÔ∏è –í–µ–ª–æ—Å–∏–ø–µ–¥—ã", callback_data="admin_bikes")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")]
        ])
        
        await message.answer(
            f"üë®‚Äçüíº **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É)**\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}!\n"
            f"–í–∞—à–∞ —Ä–æ–ª—å: {user.role.value}",
            reply_markup=admin_keyboard
        ) 
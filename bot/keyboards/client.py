from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from typing import List
from database.models.bike import Bike


def get_rental_type_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞—Ä–µ–Ω–¥—ã"""
    keyboard = [
        [
            InlineKeyboardButton(text="‚è∞ –ü–æ—á–∞—Å–æ–≤–∞—è", callback_data="rental_type_hourly"),
            InlineKeyboardButton(text="üìÖ –ü–æ—Å—É—Ç–æ—á–Ω–∞—è", callback_data="rental_type_daily")
        ],
        [
            InlineKeyboardButton(text="üõí –í—ã–∫—É–ø —Å —Ä–∞—Å—Å—Ä–æ—á–∫–æ–π", callback_data="rental_type_installment"),
            InlineKeyboardButton(text="üéØ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è", callback_data="rental_type_custom")
        ],
        [InlineKeyboardButton(text="üè™ –í—ã–±–æ—Ä –Ω–∞ –º–µ—Å—Ç–µ", callback_data="rental_onsite")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_bikes_keyboard(bikes: List[Bike]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤"""
    keyboard = []
    
    for bike in bikes:
        battery_count = len(bike.batteries) if bike.batteries else 0
        bike_text = f"üö¥‚Äç‚ôÇÔ∏è #{bike.number} - {bike.model}"
        if battery_count > 0:
            bike_text += f" (üîã√ó{battery_count})"
        
        keyboard.append([
            InlineKeyboardButton(
                text=bike_text, 
                callback_data=f"select_bike_{bike.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_duration_keyboard(rental_type: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥—ã"""
    keyboard = []
    
    if rental_type == "hourly":
        durations = [
            ("1 —á–∞—Å", "1h"), ("3 —á–∞—Å–∞", "3h"), ("6 —á–∞—Å–æ–≤", "6h"), 
            ("12 —á–∞—Å–æ–≤", "12h"), ("24 —á–∞—Å–∞", "24h")
        ]
    else:  # daily
        durations = [
            ("1 –¥–µ–Ω—å", "1d"), ("3 –¥–Ω—è", "3d"), ("7 –¥–Ω–µ–π", "7d"),
            ("14 –¥–Ω–µ–π", "14d"), ("30 –¥–Ω–µ–π", "30d")
        ]
    
    for text, value in durations:
        keyboard.append([InlineKeyboardButton(text=text, callback_data=f"duration_{value}")])
    
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_rental_type")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_rental_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã"""
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data="confirm_rental"),
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_rental")
        ],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_rental")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard) 
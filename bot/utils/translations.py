"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
"""
import json
from pathlib import Path
from typing import Dict, Any, Optional


# –ö—ç—à –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
_translations_cache: Dict[str, Dict[str, Any]] = {}


def load_translations(language: str = "ru") -> Dict[str, Any]:
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    
    Args:
        language: –ö–æ–¥ —è–∑—ã–∫–∞ (ru, tg, uz)
        
    Returns:
        Dict —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    """
    if language in _translations_cache:
        return _translations_cache[language]
    
    locales_dir = Path(__file__).parent.parent.parent / "locales"
    translation_file = locales_dir / language / "messages.json"
    
    try:
        with open(translation_file, "r", encoding="utf-8") as f:
            translations = json.load(f)
            _translations_cache[language] = translations
            return translations
    except Exception as e:
        print(f"Error loading translations for {language}: {e}")
        # Fallback –∫ —Ä—É—Å—Å–∫–æ–º—É
        if language != "ru":
            return load_translations("ru")
        return {}


def get_text(key: str, language: str = "ru", **kwargs) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ –∫–ª—é—á—É
    
    Args:
        key: –ö–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ "section.subsection.key" –∏–ª–∏ "section.key"
        language: –ö–æ–¥ —è–∑—ã–∫–∞
        **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, name="John")
        
    Returns:
        –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Examples:
        >>> get_text("start.welcome_back", "ru", name="–ò–≤–∞–Ω")
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, –ò–≤–∞–Ω!"
    """
    translations = load_translations(language)
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–ª—é—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, "start.welcome_back")
    keys = key.split(".")
    value = translations
    
    try:
        for k in keys:
            value = value[k]
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if kwargs and isinstance(value, str):
            return value.format(**kwargs)
        
        return str(value)
    except (KeyError, TypeError) as e:
        # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º –∫–ª—é—á (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        print(f"Translation key not found: {key} for language {language}")
        
        # –ü—Ä–æ–±—É–µ–º fallback –∫ —Ä—É—Å—Å–∫–æ–º—É
        if language != "ru":
            return get_text(key, "ru", **kwargs)
        
        return f"[{key}]"


def get_texts(keys: Dict[str, str], language: str = "ru", **kwargs) -> Dict[str, str]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ä–∞–∑—É
    
    Args:
        keys: –°–ª–æ–≤–∞—Ä—å {alias: key_path}
        language: –ö–æ–¥ —è–∑—ã–∫–∞
        **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        Dict —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ {alias: translated_text}
        
    Example:
        >>> get_texts({
        ...     "welcome": "start.welcome_back",
        ...     "error": "common.error"
        ... }, "ru", name="–ò–≤–∞–Ω")
        {"welcome": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, –ò–≤–∞–Ω!", "error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"}
    """
    return {
        alias: get_text(key, language, **kwargs)
        for alias, key in keys.items()
    }


class TranslationHelper:
    """
    –•–µ–ª–ø–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
    """
    
    def __init__(self, language: str = "ru"):
        self.language = language
        self._translations = load_translations(language)
    
    def get(self, key: str, **kwargs) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–ª—é—á—É"""
        return get_text(key, self.language, **kwargs)
    
    def multiple(self, keys: Dict[str, str], **kwargs) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        return get_texts(keys, self.language, **kwargs)
    
    @property
    def lang(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞"""
        return self.language


def get_translation_for_languages(key: str, languages: list = None, **kwargs) -> Dict[str, str]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —è–∑—ã–∫–æ–≤ —Å—Ä–∞–∑—É
    
    Args:
        key: –ö–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞
        languages: –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ["ru", "tg", "uz"])
        **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        Dict {language: translated_text}
        
    Example:
        >>> get_translation_for_languages("start.welcome_back", name="–ò–≤–∞–Ω")
        {
            "ru": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, –ò–≤–∞–Ω!",
            "tg": "üëã –•—É—à –æ–º–∞–¥–µ–¥, –ò–≤–∞–Ω!",
            "uz": "üëã Xush kelibsiz, –ò–≤–∞–Ω!"
        }
    """
    if languages is None:
        languages = ["ru", "tg", "uz"]
    
    return {
        lang: get_text(key, lang, **kwargs)
        for lang in languages
    }


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
LANGUAGES = {
    "ru": {"code": "ru", "name": "–†—É—Å—Å–∫–∏–π", "flag": "üá∑üá∫"},
    "tg": {"code": "tg", "name": "–¢–æ“∑–∏–∫”£", "flag": "üáπüáØ"},
    "uz": {"code": "uz", "name": "O'zbek", "flag": "üá∫üáø"}
}


def get_user_language(user) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user: –û–±—ä–µ–∫—Ç User –∏–∑ –ë–î
        
    Returns:
        –ö–æ–¥ —è–∑—ã–∫–∞ –∏–ª–∏ "ru" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    if user and hasattr(user, 'language'):
        return user.language or "ru"
    return "ru"

